name: Continuous deployment - development WAS

on: [ push ]

env:
  DOCKER_IMAGE_NAME: ghcr.io/${{ github.repository }}:latest
  DOCKER_CONTAINER_NAME: soolsool-was
  DOCKER_USERNAME: woowatechcamp
  GITHUB_USERNAME: woowatechcamp
  GITHUB_REPOSITORY: soolsool

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'corretto'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: bootJar

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}

  #      - name: Build docker image
  #        uses: docker/build-push-action@v4
  #        with:
  #          registry: ghcr.io
  #          push: true
  #          username: $ {{ env.GITHUB_USERNAME }}
  #          password: ${{ secrets.GHCR_TOKEN }}
  #          repository: ${{ env.GITHUB_USERNAME }}/${{ env.GITHUB_REPOSITORY }}
  #          tags: latest

  deploy:
    needs: build
    runs-on: [ self-hosted, soolsool-dev-runner ]
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Docker run
        run: |
          docker pull ${{ env.DOCKER_IMAGE_NAME }} && \
          if docker ps -a | grep -q ${{ env.DOCKER_CONTAINER_NAME }} ; then \
            docker stop ${{ env.DOCKER_CONTAINER_NAME }} && \
            docker rm ${{ env.DOCKER_CONTAINER_NAME }} ; \
          fi && \
          docker run -d -p 8080:8080 --restart=always --name=${{ env.DOCKER_CONTAINER_NAME }} --env-file=~/soolsool-docker.env ${{ env.DOCKER_IMAGE_NAME }}


#          docker stop ${{ env.DOCKER_CONTAINER_NAME }} && \
#          docker rm ${{ env.DOCKER_CONTAINER_NAME }} && \
#          docker rmi ${{ env.DOCKER_IMAGE_NAME }}:latest && \
#          docker run -d -p 8080:8080 --name ${{ env.DOCKER_CONTAINER_NAME }} --restart always ${{ env.DOCKER_IMAGE_NAME }}:latest
